--PROCEDURE--

--1.(STORED)--

CREATE OR REPLACE PROCEDURE PROC_GREETINGS
AS
BEGIN
  DBMS_OUTPUT.PUT_LINE('HAPPY LEARNING');
  END;
  
--CALLING PROCEDURE--
BEGIN
 PROC_GREETING;
  END;
  
--2.PARAMETER--

CREATE OR REPLACE PROCEDURE PROC_GREETINGS2(VNAME VARCHAR2)
AS
BEGIN
  DBMS_OUTPUT.PUT_LINE('WELCOME '|| VNAME);
  END;
  --CALLING--
BEGIN
  PROC_GREETINGS2('ANJITHA');
  END;
  
--3. MULTI(IN)--

CREATE OR REPLACE PROCEDURE PROC_MULTI(X IN NUMBER,Y IN NUMBER)
AS
Z NUMBER;
BEGIN
  Z:=X*Y;
  DBMS_OUTPUT.PUT_LINE('RESULT '||Z);
  END;
  --CALLING--
BEGIN
  PROC_MULTI(12,10);
  END;
 
--4. MULTI (IN OUT)--

CREATE OR REPLACE PROCEDURE PROCS_MULTI(X IN OUT NUMBER,Y IN NUMBER)
AS
BEGIN
  X:=X*Y;
  END;
   ----------------------
  
  DECLARE
  A NUMBER:=&A;
  B NUMBER :=&B;
  BEGIN
    PROCS_MULTI(A,B);
    DBMS_OUTPUT.PUT_LINE('PRODUCT '||A);
    END;
    
-----INSERT--

CREATE OR REPLACE PROCEDURE PROC_DEPT_AA(
IN_DEPTNO IN NUMBER,
IN_DNAME IN VARCHAR2,
IN_LOC IN VARCHAR2)
AS
BEGIN
  
INSERT INTO DEPT(DEPTNO,DNAME,LOC)VALUES(IN_DEPTNO,IN_DNAME,IN_LOC);
DBMS_OUTPUT.PUT_LINE('DEPARTMENT ADDED '||IN_DEPTNO||' SUCCESSFULLY');
END;

BEGIN
  PROC_DEPT_AA(32,'DIGITAL','NEW YORK');
  END;
  
  
SELECT * FROM DEPT;

----DELETE---

CREATE OR REPLACE PROCEDURE DELETE_DEPT_AA
(
DEPID DEPT.DEPTNO%TYPE
)
AS
BEGIN
  DELETE FROM DEPT WHERE DEPTNO=DEPID;
  DBMS_OUTPUT.PUT_LINE('DEPARTMENT DELETED '||DEPID|| ' SUCCESFFULLY');
  END;
  ---------
  
  BEGIN
    DELETE_DEPT_AA(22);
        END;
  ----------------------
select * from DEPT;
 
CREATE OR REPLACE PROCEDURE LIST_EMP
AS
VNAME EMP.ENAME%TYPE;
VDDNAME DEPT.DNAME%TYPE;

CURSOR CUR_DEPT
IS 
SELECT ENAME,DNAME FROM DEPT D JOIN EMP E ON D.DEPTNO=E.DEPTNO;

BEGIN 
  OPEN CUR_DEPT;
LOOP
  FETCH CUR_DEPT INTO VNAME,VDDNAME;
  EXIT WHEN CUR_DEPT%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME '||VNAME||'DEPARTMENT NAME '||VDDNAME);
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('------------------');
  DBMS_OUTPUT.PUT_LINE('TOTAL RECORDS '||'CUR_DEPT%ROWCOUNT');
  CLOSE CUR_DEPT;
  END;
 
BEGIN
  LIST_EMP();
  END; 

----FUNCTION----

CREATE OR REPLACE FUNCTION EMP_FUNC (V_EMP IN NUMBER)
RETURN NUMBER
IS
V_SAL NUMBER;
VN_SAL NUMBER;
BEGIN
  
SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=V_EMP;

IF(V_SAL>1500) THEN
VN_SAL := V_SAL + (V_SAL * 0.1);
ELSE
  VN_SAL :=V_SAL + (V_SAL * 0.2);
  END IF;
  RETURN VN_SAL;
  END;
  
  SELECT EMP_FUNC(7900)FROM DUAL;
  
  SELECT * FROM EMP;
  
  ----SUM---
CREATE OR REPLACE FUNCTION SUM_FUNC(NUM1 IN NUMBER,NUM2 IN NUMBER)
RETURN NUMBER
IS BEGIN
RETURN NUM1 + NUM2;
END;

DECLARE
A NUMBER := &A;
B NUMBER :=&B;
VSUM NUMBER;
BEGIN 
  VSUM :=SUM_FUNC(A,B);
  DBMS_OUTPUT.PUT_LINE('THE SUM IS '||VSUM);
  END;
  
 SELECT ENAME,SUM_FUNC(SAL,COMM)TOTAL_SAL FROM EMP;
 
 --EMI--
 CREATE A FUNCTION EMI WHICH TAKES AMOUNT,NO OF MONTHS 
 
 
  CREATE OR REPLACE FUNCTION EMI_FUNC(P IN NUMBER,N IN NUMBER,R IN NUMBER)
RETURN NUMBER
IS
v_EM NUMBER;
 BEGIN
v_EM:=(P*R*((1+R)**N))/(((1+R)**N)-1);
RETURN v_EM;
END;

DECLARE
VEMI NUMBER;
BEGIN 
  VEMI:=EMI_FUNC(100000,12,12);
  DBMS_OUTPUT.PUT_LINE('EMI IS '||VEMI);
  END;
  
  

  select * from emp;
  
  
